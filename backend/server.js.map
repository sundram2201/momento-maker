{"mappings":"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","sources":["app.js","routes/user.js","controllers/user.js","models/user.js","models/moment.js","middleware/jwtCheck.js","routes/moment.js","controllers/moment.js","helper/multerUpload.js","routes/cityList.js","controllers/cityList.js","middleware/ErrorMiddleware.js"],"sourcesContent":["const express = require(\"express\");\n\nconst app = express();\n\n// module import\nconst cors = require(\"cors\");\nconst cookieParser = require(\"cookie-parser\");\nconst userRoute = require(\"./routes/user\");\nconst momentRoute = require(\"./routes/moment\");\nconst cityListRoute = require(\"./routes/cityList\");\n\n// middleware for request\napp.use(express.json());\n\napp.use(\"/uploads\", express.static(\"uploads\"));\n\napp.use(express.urlencoded({ extended: true }));\napp.use(\n  cors({\n    credentials: true,\n  })\n);\napp.use(cookieParser());\n\napp.get(\"/\", function (req, res) {\n  res.send(\"Welcome to Portal...\");\n});\n\n//api\napp.use(\"/api/city\", cityListRoute);\napp.use(\"/api/user\", userRoute);\napp.use(\"/api/moment\", momentRoute);\n\n// Error Middleware\nconst ErrorMiddleware = require(\"./middleware/ErrorMiddleware\");\napp.use(ErrorMiddleware);\n\nmodule.exports = app;\n","const Router = require(\"express\").Router();\nconst { createUser, loginUser, momentList, getUserDetails } = require(\"../controllers/user\");\nconst { verifyToken } = require(\"../middleware/jwtCheck\");\n\nRouter.route(\"/register-user\").post(createUser);\nRouter.route(\"/login-user\").post(loginUser);\nRouter.route(\"/get-user\").get(verifyToken, getUserDetails);\nRouter.route(\"/moment-list\").get(verifyToken, momentList);\n\nmodule.exports = Router;\n","const UserDB = require(\"../models/user\");\nconst MomentDB = require(\"../models/moment\");\nconst bcrypt = require(\"bcrypt\");\nconst jwt = require(\"jsonwebtoken\");\nconst { default: mongoose } = require(\"mongoose\");\nconst JWT_SECRET = process.env.JWT_SECRET || \"abc\";\n\nexports.createUser = async (req, res) => {\n  try {\n    const { first_name, last_name, mobile_no_pre, mobile_no, email, city, password } = req.body;\n\n    const existingUser = await UserDB.findOne({ email });\n    if (existingUser) {\n      return res.status(400).json({ error: \"Email already in use\" });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const newUser = new UserDB({\n      first_name,\n      last_name,\n      mobile_no_pre,\n      mobile_no,\n      email,\n      city,\n      password: hashedPassword,\n    });\n\n    await newUser.save();\n\n    res.status(201).json({ message: \"Registration successful\" });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexports.loginUser = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    const user = await UserDB.findOne({ email }).select(\"+password\");\n\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid credentials\" });\n    }\n\n    const passwordMatch = await bcrypt.compare(password, user.password);\n\n    if (passwordMatch) {\n      const token = jwt.sign({ userId: user._id, email: user.email }, JWT_SECRET, { expiresIn: \"1h\" });\n      return res.status(200).json({\n        success: true,\n        message: \"login successfully\",\n        data: user,\n        token,\n      });\n    } else {\n      res.status(401).json({ error: \"Invalid credentials\" });\n    }\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexports.momentList = async (req, res) => {\n  try {\n    const userId = req.user;\n\n    const checkUser = await UserDB.findOne({ _id: userId });\n\n    if (!checkUser) {\n      res.status(404).json({ status: false, message: \"invalid user\" });\n    }\n\n    let message = `${req.protocol}:${req.get(\"host\")}/uploads/`;\n\n    const momentList = await MomentDB.aggregate([\n      {\n        $match: {\n          userId: mongoose.Types.ObjectId(userId),\n        },\n      },\n      {\n        $project: {\n          _id: 1,\n          title: 1,\n          comment: 1,\n          tags: 1,\n          userId: 1,\n          createdAt: 1,\n          updatedAt: 1,\n          files: {\n            $map: {\n              input: \"$files\",\n              as: \"files\",\n              in: {\n                $concat: [message, \"$$files\"],\n              },\n            },\n          },\n        },\n      },\n    ]);\n\n    return res.status(200).json({\n      success: true,\n      message: \"data fetched successfully\",\n      data: momentList,\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexports.getUserDetails = async (req, res) => {\n  try {\n    const user = await UserDB.findOne({ _id: req.user });\n\n    console.log(req.user);\n    const userData = {\n      userId: user._id,\n      first_name: user.first_name,\n      last_name: user.last_name,\n      email: user.email,\n      mobile_no: user.mobile_no_pre + user.mobile_no,\n    };\n    return res.status(200).json({ message: \"Data recieved successfully\", userData });\n  } catch (err) {\n    res.status(401).json({ error: \"Error getting data\" });\n  }\n};\n","const mongoose = require(\"mongoose\");\n\nconst userSchema = mongoose.Schema(\n  {\n    first_name: {\n      type: String,\n      required: [true, \"first_name is required\"],\n    },\n    last_name: {\n      type: String,\n      required: [true, \"last_name is required\"],\n    },\n    mobile_no_pre: {\n      type: String,\n      required: [true, \"mobile_no_pre is required\"],\n      trim: true,\n      lowercase: true,\n    },\n    mobile_no: {\n      type: Number,\n      required: [true, \"mobile_no is required\"],\n      trim: true,\n      lowercase: true,\n    },\n    email: {\n      type: String,\n      required: [true, \"email is required\"],\n      unique: true,\n      trim: true,\n      lowercase: true,\n    },\n    city: {\n      type: String,\n      required: [true, \"city is required\"],\n      trim: true,\n    },\n    password: {\n      type: String,\n      required: [true, \"password is required\"],\n      select: false,\n    },\n  },\n  {\n    timestamps: true,\n  }\n);\n\nmodule.exports = mongoose.model(\"users\", userSchema);\n","const mongoose = require(\"mongoose\");\n\nconst { ObjectId } = mongoose.Schema.Types;\n\nconst momentSchema = new mongoose.Schema(\n  {\n    title: {\n      type: String,\n      required: true,\n    },\n    comment: {\n      type: String,\n      default: \"\",\n    },\n    tags: [\n      {\n        type: String,\n      },\n    ],\n    userId: {\n      type: ObjectId,\n      ref: \"user\",\n    },\n    files: [\n      {\n        type: String,\n      },\n    ],\n  },\n  {\n    timestamps: true,\n  }\n);\n\nmodule.exports = mongoose.model(\"moment\", momentSchema);\n","const jwt = require(\"jsonwebtoken\");\nconst JWT_SECRET = process.env.JWT_SECRET || \"abc\";\nconst UserDB = require(\"../models/user\");\n\nexports.verifyToken = async (req, res, next) => {\n  const token = req.headers[\"token\"];\n  if (!token) return res.status(401).json({ status: false, message: \"No token provided\" });\n  try {\n    jwt.verify(token, JWT_SECRET, async (err, data) => {\n      if (err) {\n        console.log(\"errr:::::\");\n        res.statusCode = 401;\n        return res.status(401).json({ status: false, message: \"Invalid Token\" });\n      } else {\n        let resp = await UserDB.findOne({ _id: data.userId });\n        if (!resp) {\n          console.log(\"after next\");\n          res.statusCode = 401;\n          return res.status(401).json({ status: false, message: \"Session Expired\" });\n        } else {\n          req.user = data.userId;\n          next();\n        }\n      }\n    });\n  } catch (e) {\n    res.statusCode = 401;\n    console.log(\"in catch\");\n    return res.status(401).json({ status: false, message: \"Unauthorized Access\" });\n  }\n};\n","const Router = require(\"express\").Router();\n\nconst { createMoment, deleteMoment } = require(\"../controllers/moment\");\nconst { verifyToken } = require(\"../middleware/jwtCheck\");\n\nconst { uploadFile } = require(\"../helper/multerUpload\");\n\nRouter.route(\"/create-moment\").post(verifyToken, uploadFile.array(\"files\", 10), createMoment);\nRouter.route(\"/delete-moment\").delete(verifyToken, deleteMoment);\n\nmodule.exports = Router;\n","const MomentDB = require(\"../models/moment\");\nconst UserDB = require(\"../models/user\");\nconst fs = require(\"fs\");\n\nexports.createMoment = async (req, res) => {\n  try {\n    const { title, comment, tags } = req.body;\n    let files = req.files;\n    // console.log(req.files, \":>?>?mmmmmmmmmmmmdmmmmmmmmmmmmmm\");\n\n    if (!files.length) {\n      throw new Error(\"please add one or more image\");\n    }\n\n    files = files.map((d) => d.filename);\n\n    const userId = req.user;\n\n    const checkUser = await UserDB.findOne({ _id: req.user });\n\n    if (!checkUser) {\n      return res.status(401).json({\n        success: false,\n        message: \"invalid token\",\n        data: {},\n      });\n    }\n\n    if (title == \"\" || comment == \"\" || userId == \"\") {\n      return res.status(400).json({\n        success: false,\n        message: \"please provide all field\",\n        data: {},\n      });\n    }\n\n    const addMomentData = await MomentDB.create({\n      title,\n      comment,\n      tags,\n      userId,\n      files,\n    });\n\n    if (!addMomentData) {\n      return res.status(400).json({\n        success: false,\n        message: \"something went wrong\",\n        data: {},\n      });\n    }\n\n    res.status(201).json({\n      success: true,\n      message: \"moment added successfully\",\n      data: addMomentData,\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexports.deleteMoment = async (req, res) => {\n  try {\n    const checkUser = req.user;\n    const moment_id = req.body.moment_id;\n\n    if (!checkUser || !moment_id) {\n      res.status(404).json({ status: false, message: \"no user or moment id\" });\n    }\n\n    const userCheck = await UserDB.findOne({ _id: checkUser });\n\n    if (!userCheck) {\n      return res.status(404).json({ status: false, message: \"something went wrong\" });\n    }\n\n    const deleteMomentData = await MomentDB.findByIdAndDelete(moment_id);\n\n    if (!deleteMomentData) {\n      return res.send(\"something went wrong\");\n    }\n\n    deleteMomentData.files.map((items) => {\n      fs.unlink(`./uploads/${items}`, (err) => {\n        if (err && err.errno == -4058) {\n          console.log({\n            message: \"no such file or directory\",\n            path: err.path.replaceAll(\"\\\\\", \"/\"),\n          });\n        } else if (err) {\n          console.log({ error: err });\n        }\n      });\n    });\n\n    res.status(200).json({\n      success: true,\n      message: \"deleted successfully\",\n      data: {},\n    });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n","const path = require(\"path\");\nconst multer = require(\"multer\");\n\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, \"uploads\");\n  },\n  filename: function (req, file, cb) {\n    cb(null, file.fieldname + \"-\" + Date.now() + path.extname(file.originalname));\n  },\n});\n\nexports.uploadFile = multer({\n  storage,\n  fileFilter: (req, file, cb) => {\n    let allowInputArr = [\"image/png\", \"image/jpg\", \"image/jpeg\"];\n\n    if (allowInputArr.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      let err = new Error(`Invalid FIle Type`);\n      err.name = \"INVALID_FILE_TYPE\";\n      return cb(err, false);\n    }\n  },\n});\n","const Router = require(\"express\").Router();\nconst { cityList } = require(\"../controllers/cityList\");\n\nRouter.route(\"/city-list\").get(cityList);\n\nmodule.exports = Router;\n","exports.cityList = (req, res) => {\n  let arr = [\n    \"Mumbai\",\n    \"Delhi\",\n    \"Bengaluru\",\n    \"Kolkata\",\n    \"Chennai\",\n    \"Ahmedabad\",\n    \"Hyderabad\",\n    \"Pune\",\n    \"Surat\",\n    \"Kanpur\",\n    \"Jaipur\",\n    \"Lucknow\",\n    \"Nagpur\",\n    \"Indore\",\n    \"Patna\",\n    \"Bhopal\",\n    \"Ludhiana\",\n    \"Tirunelveli\",\n    \"Agra\",\n    \"Vadodara\",\n  ];\n\n  res.status(200).json({\n    success: true,\n    message: \"city list\",\n    data: arr,\n  });\n};\n","const sendDevError = (err, res) => {\n  res.status(err.statusCode).json({\n    status: err.status,\n    message: err.message,\n    code: err.statusCode,\n    res: err.data,\n    stack: err.stack,\n    err,\n  });\n};\n\nconst sendProdError = (err, res) => {\n  if (err.isOperational) {\n\n    res.status(err.statusCode).json({\n      status: err.status,\n      message: err.message,\n      code: err.statusCode,\n      res: err.data,\n    });\n  } else {\n    console.log(\"Error 💥\", err);\n\n    res.status(500).json({\n      status: \"error\",\n      message: \"Something went wrong...\",\n      code: 500,\n    });\n  }\n};\n\nmodule.exports = (err, req, res, next) => {\n  err.statusCode = err.statusCode || 500;\n  err.status = err.status || \"Internal Server Error\";\n\n  if (err.data) {\n    err.data = err.data.map((err) => err.message);\n  }\n\n  if (process.env.NODE_ENV === \"development\") {\n    sendDevError(err, res);\n  } else {\n    sendProdError(err, res);\n  }\n};\n"],"names":[],"version":3,"file":"server.js.map"}